// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Inference {
    // auto increment
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    url       String
    result    String
}

model Question {
    id          Int          @id @default(autoincrement())
    createdAt   DateTime     @default(now())
    url         String
    s3Url       String?
    submissions Submission[]
    options     Option[]
}

model Option {
    id         Int          @id @default(autoincrement())
    createdAt  DateTime     @default(now())
    text       String
    textEn     String?
    sourceType String
    sourceId   String
    questionId Int
    question   Question     @relation(fields: [questionId], references: [id])
    Submission Submission[]

    @@index([questionId])
}

model Submission {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    questionId Int
    optionId   Int
    userUuid   String
    question   Question @relation(fields: [questionId], references: [id])
    option     Option   @relation(fields: [optionId], references: [id])

    @@index([questionId])
    @@index([optionId])
}

// Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
